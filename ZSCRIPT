#Include "NukeDemon.zsc"

Class NuclearMissileLauncher : Weapon
{
	Default
	{
		//$Category Weapons
		//$Title Nuke Launcher
		Weapon.SelectionOrder 2820;
		Weapon.SlotNumber 8;
		Inventory.PickupMessage "You got the Nuclear Missile Launcher!";
		Obituary "%o was annihilated by %k's Nuclear Missile.";
		Weapon.AmmoType "NuclearMissile";
		Weapon.AmmoGive 2;
		Weapon.AmmoUse 1;
		Weapon.Kickback 10000;
		+Weapon.NoAutoFire;
		+Weapon.Explosive;
		+Weapon.BFG;
	}
	Actor FiredNuke;
	States
	{
		Spawn:
			NUKW A -1;
			Stop;
		Ready:
			NUKG A 1 A_WeaponReady;
			Loop;
		Deselect:
			NUKG A 1 A_Lower();
			Loop;
		Select:
			NUKG A 1 A_Raise();
			Loop;
		Fire:
			NUKG A 20
			{
				If (Invoker.FiredNuke)
				{
					A_Log ("There is an active nuke already.");
					Return ResolveState ("Ready");
				}
				Return ResolveState (Null);
			}
			NUKG A 20 A_PlaySound("weapons/nuclearmissilecharge",CHAN_WEAPON);
			NUKG A 28 A_GunFlash();
			NUKG B 4 Bright
			{
				Invoker.FiredNuke = A_FireProjectile ("NuclearMissileShot",0,1,0,5);
				A_Recoil (5);
				A_Light2();
			}
			NUKG B 3 Bright A_Recoil (-4.5);
			NUKG B 28;
			Goto Ready;
		Altfire:
			NUKG F 8
			{
				if (!Invoker.FiredNuke) //Null check so the VM doesn't crap out.
				{
					Return ResolveState ("Ready");
				}
					Invoker.FiredNuke.SetStateLabel ("Death"); //Explodes the missile
					Invoker.FiredNuke.A_Stop(); //Stops the missiles' momentum
					Invoker.FiredNuke.A_StartSound("Weapons/NuclearMissileExplode",CHAN_AUTO,0,1.0,ATTN_NONE);
					Invoker.FiredNuke = Null; //Clears the FiredNuke pointer.
					A_StartSound ("weapons/beep",CHAN_WEAPON); //Makes the beep when the altfire is pressed
					Return ResolveState (Null);
			}
			NUKG FFF 1 A_WeaponOffset (wy:1,flags:WOF_ADD);
			Goto Ready;
		Flash:
			NUKG C 22 Bright;
			NUKG D 6 Bright A_Light1();
			NUKG E 7 Bright A_Light2();
			NUKG E 0 A_Light0();
			Stop;
	}
}

Class NuclearMissile : Ammo
{
	Default
	{
		//$Category Ammunition
		//$Title Nuclear Missile
		Inventory.Amount 1;
		Inventory.MaxAmount 2;
		Inventory.AltHUDIcon "NUKAC0";
		Inventory.Icon "NUKAC0";
		Inventory.PickupMessage "YOU PICKED UP A NUCLEAR MISSILE !!!";
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 4;
	}
	States
	{
		Spawn:
			NUKA A -1;
			Loop;
	}
}

Class NuclearMissileShot : Actor
{
	Default
	{
		Radius 13;
		Height 8;
		Speed 30;
		FastSpeed 60;
		PROJECTILE;
		+StrifeDamage;
		+NoTarget;
		+FullVolDeath;
		+ThruGhost;
		+ForceRadiusDMG;
		//Add a giant animated decal eventually that spawns when the nuke impacts a wall.
		DamageType "NuclearBlast";
		DeathSound "Weapons/NuclearMissileExplode";
		Obituary "%o was annihilated by a Nuclear Missile.";
	}
	States
	{
		Spawn:
			NKS1 A 1 Bright A_SpawnItemEx("NuclearMissileTrail");
			Loop;
		Death:
			NKE1 A 0 Bright
			{
				A_RadiusGive ("NuclearRadiationPoisoning",4096+1024,RGF_PLAYERS|RGF_MONSTERS,1);
				A_SetScale (6.0,6.0);
				A_QuakeEx (6,6,4,35*10,1024,8192,flags: QF_SCALEDOWN);
				A_SetTranslucent(1,1);
				//Did the nuke detonate 128 or more MU above a floor ?
				If ((pos.z - FloorZ) >= 256)
				{
					SetStateLabel ("Death.Air",False);
				}
			}
			KNE1 A 1 Bright A_AttachLight ("NuclearExplosionLight",DynamicLight.PulseLight,"FFCE0D",4096+2048,0,DYNAMICLIGHT.LF_ATTENUATE,(0,0,256),param:40);
			NKE1 A 0 Bright
			{
				If(Target && Target.Player && Target.Player.ReadyWeapon)
				{
					Let Weapon = NuclearMissileLauncher(Target.Player.ReadyWeapon);
					If (Weapon)
					{
						If (Weapon.FiredNuke){Weapon.FiredNuke = Null;}
					}
				}
			}
			NKE1 AAAAA 1 Bright
			{
				A_Explode (2048,1536,XF_HURTSOURCE,TRUE,512);
				//This produces the screen flash if you look at the explosion, made by Agent_Ash.
				For(int pn = 0; pn < MAXPLAYERS; pn++)
				{
					If (!playerInGame[pn])
						Continue;
						PlayerPawn plr = players[pn].mo;
					If(!plr)
						Continue;
					If (!CheckSight(plr))
						Continue;
						Vector3 Targetpos = LevelLocals.SphericalCoords((plr.pos.x,plr.pos.y,plr.player.viewz),pos,(plr.angle,plr.pitch));
					If (abs(Targetpos.x) > 90 || abs(Targetpos.y) > 90)
						Return;
						plr.A_SetBlend("FFFFFF",1.0,200);
				}

			}
			NKE1 A 0 Bright
			{
				For (int i=0; i < 128; i++) //Amount of flames that are created in a ring
				{
					Double SpawnAngle = i * 360.0 / 128.0; //Mathematical witchcraft.
					A_SpawnProjectile("NukeWall",0,0,SpawnAngle);
				}
			}
			TNT1 A 0
			{
				Int BoomAmount = 8;
				For (int i=0; i < BoomAmount; i++)
				{
					A_SpawnItemEx ("NukeExplosionGenerator",xofs: 128,angle: i * 360.0 / boomamount);
				}
			}
			NKE1 BCDEFG 16 Bright;
			TNT1 A 0 A_Explode (768,1024,XF_HURTSOURCE,True,384);
			NKE1 HIJK 16 Bright;
			TNT1 A 0 A_StartSound ("Weapons/shockwave",32,attenuation:0.00005); //Has to be put outside of the below function
			NKE1 L 16 Bright //Delayed shockwave and fire ring
			{
				A_RadiusThrust (5120,8192+1024,RTF_NOTMISSILE,512);
				A_RadiusThrust (3072,8192+1024,RTF_NOTMISSILE|RTF_THRUSTZ,512); //This is needed because using just one thrust with the THRUSTZ flag on launches everything really far up.
				For (int i=0; i < 384; i++)
				{
					Double Spawnangle = i * 360.0 / 384.0;
					A_SpawnProjectile("NukeRing",384,0,SpawnAngle);
				}
			}
			NKE1 MNOPQRSTU 16 Bright;
			TNT1 A 0 A_RemoveLight ("NuclearExplosionLight");
			Stop;
		Death.Air:
			TNT1 A 0 A_StartSound ("Weapons/shockwave",32,attenuation:0.00025); //Has to be put outside of the below function
			TNT1 A 0
			{
				A_AttachLight ("NuclearExplosionAirLight",DynamicLight.PulseLight,"FFCE0D",4096+2048,0,DYNAMICLIGHT.LF_ATTENUATE,(0,0,256),param:20);
				A_RadiusGive ("NuclearRadiationPoisoning",4096+1024,RGF_PLAYERS|RGF_MONSTERS,1);
				A_SetRenderStyle (1.0,Style_Add);
				A_QuakeEx (6,6,4,35*10,0,8192,flags: QF_SCALEDOWN);
				A_SetScale (12.0,12.0);
				For (int i=0; i < 384; i++)
				{
					Double SpawnAngle = i * 360.0 / 384.0;
					A_SpawnProjectile("NukeRing",0,0,SpawnAngle);
				}
			}
			AXPL A 1; //If this delay wasn't here the pressing the altfire would cause a VM abort every time
			AXPL A 1
			{
				If(Target && Target.Player && Target.Player.ReadyWeapon)
				{
					Let Weapon = NuclearMissileLauncher(Target.Player.ReadyWeapon);
					If (Weapon)
					{
						If (Weapon.FiredNuke){Weapon.FiredNuke = Null;}
					}
				}
			}
			AXPL ABCD 8 Bright
			{
				A_Explode (2048,1536,XF_HURTSOURCE,True,512);
				A_SetScale (scale.x+1.0,scale.y+1.0);
			}
			AXPL EFGHI 8 Bright A_SetScale (scale.x+1.0,scale.y+1.0);
			AXPL JKLM 8 A_SetScale (scale.x+1.0,scale.y+1.0);
			TNT1 A 0 A_RemoveLight ("NuclearExplosionAirLight");
			Stop;
	}
}

//Basically just an alias for NuclearMissileShot, to spawn nuclear explosions at will.

Class NuclearExplosion : NuclearMissileShot
{
	Default
	{
		-NoGravity;
		Gravity 10.0;
		Obituary "%o died in a nuclear blast";
	}
	States
	{
		Spawn:
			TNT1 A 2
			{
				SetStateLabel ("Death",False);
			}
			Loop;
	}
}

//The radiation poisoning given to actors explosed to the nuclear explosion

Class NuclearRadiationPoisoning : Inventory //When DECORATE uses an inventory token it's a gross hack/
{
	Default
	{
		//This entire set of flags is to basically ensure that you can't just remove your radiation sickness
		+Inventory.Undroppable;
		+Inventory.Unclearable;
		+Inventory.HubPower;
		+Inventory.PersistentPower;
		+Inventory.Untossable;
		//=======================
		+Inventory.NoScreenFlash;
	}
	Int RandomDuration;
	Int TimesHurt;
	Override Void AttachToOwner (Actor Other)
	{
		Int Randomduration = RandomPick (30,60,90); //30,60 or 90 times that the radiation harms an actor.
		Super.AttachToOwner(Other);
		If (Owner) //Obligatory null check
		{
			//Check for PowerIronFeet and any classes inheriting from it, if the actor in question has it, then don't poison them.
			If (Owner.FindInventory("PowerIronFeet",True))
			{
				Return;
			}
			Owner.PoisonMobj (Self,Null,Random (2,4),RandomDuration,35,"RadiationSickness");
		}
	}
}

Class NukeExplosionGenerator : Actor
{
	Default
	{
		Radius 6;
		Height 4;
		Speed 32;
		+NoBlockmap;
		+NoGravity;
		+Dropoff;
		+Missile;
		+Ripper;
		+BloodlessImpact;
		+NoTeleport;
		+ThruGhost;
		+NotAutoaimed;
		-Pushable;
		-DontThrust;
		Scale 0.9;
		DamageType "NuclearBlast";
		RenderStyle "None";
		DeathSound "Weapons/RocketExplode";
		Obituary "%o was annihilated by a Nuclear Missile.";
	}
	States
	{
		Spawn:
			ROKE A 1
			{
				A_SpawnItemEx("DispersionRocketExplosion");
				A_SpawnItemEx("DispersionRocketExplosion",zofs: 12);
				A_SpawnItemEx("DispersionRocketExplosion",zofs: 32);
			}
			ROKE AAA 12;
			Stop;
		Death:
			ROKE A 4 Bright
			{
				A_Explode(128,128);
				A_SetTranslucent(0.7,1);
			}
			ROKE BCDEFG 6 Bright;
			Stop;
	}
}

Class NukeWall : Actor
{
	Default
	{
		Radius 8;
		Height 12;
		Speed 24;
		Damage 5;
		+NoBlockmap;
		+Dropoff;
		+Missile;
		+ActivateImpact;
		+ActivatePCross;
		+Ripper;
		+BloodlessImpact;
		+NoTarget;
		+FloorHugger;
		+ThruGhost;
		+NoTAutoaimed;
		-Pushable;
		-DontThrust;
		Renderstyle "Translucent";
		Alpha 0.8;
		DamageType "NuclearRadiation";
		Obituary "%o was dissolved by a Nuclear Flamewall.";
		DeathSound "Weapons/NuclearMissileFlameHit";
	}
	Override Void Tick ()
	{
		Super.Tick();
		A_Explode (64,32);
		If (WaterLevel == 3){SetStateLabel ("Death",False);}
	}
	States
	{
		Spawn:
			FLWS ABC 2 Bright;
			FLWS D 2 Bright;
			FLWS EFGHI 2 Bright;
			FLWS J 2 Bright A_SpawnItemEx("NukeFire");
			FLWS KLMNOABCDEFGHIJ 2 Bright;
			Goto Spawn+10;
		Death:
			FLWE A 3 Bright
			{
				A_Explode (96,64);
				A_Stop();
			}
			FLWE BCDEFGHIJKLMNOPQRST 3 Bright;
			Stop;
	}
}

Class NukeFire : Actor
{
	Default
	{
		Radius 8;
		Height 20;
		Speed 2;
		Mass 500;
		Damage 128;
		+Dropoff;
		+Floorclip;
		+NoBlood;
		+NoTarget;
		+ThruGhost;
		+NotAutoaimed;
		-Pushable;
		-DontThrust;
		Renderstyle "Add";
		Alpha 0.6;
		DamageType "NuclearRadiation";
		Obituary "%o was burned by the Nuclear fire.";
		DeathSound "Weapons/NuclearMissileBurn";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetAngle ((Random (0,360)));
				A_ChangeVelocity (x: (Random (-32,32)),flags: CVF_RELATIVE);
			}
			NKFR ABCDEFGHIJKLMN 6 Bright
			{
				A_Explode (64,160);
				A_PlaySound ("weapons/nuclearmissileburn");
			}
			TNT1 A 0 A_Jump (64,"Death");
			Goto Spawn+1;
		Death:
			NKFR O 5 Bright;
			NKFR P 7 Bright;
			NKFR Q 10 Bright;
			Stop;
	}
}

Class NukeRing : Actor
{
	Default
	{
		RenderStyle "Add";
		DamageType "NuclearRadiation";
		Obituary "%o got hit by the ring of fire of a nuke";
		Projectile;
		+NoInteraction;
	}
	Override Void PostBeginPlay ()
	{
		Super.PostBeginPlay();
		A_Stop();
		A_ChangeVelocity (24,flags:CVF_RELATIVE);
	}
	States
	{
		Spawn:
			NKBL ABCDEFGH 2 Bright A_Explode (16,80,XF_HURTSOURCE); //Each line is 64 tics
			NKBL ABCDEFGH 2 Bright;
			Goto Death;
		Death:
			NKBL IJK 12 Bright A_SetScale (scale.x+0.1);
			NKBL LMN 16 Bright A_SetScale (scale.x+0.1);
			Stop;
	}
}

Class NuclearMissileTrail : Actor
{
	Default
	{
		Radius 3;
		Height 4;
		Speed 2;
		+NoBlockmap;
		+NoGravity;
		+NoClip;
		+NoTeleport;
		+ThruGhost;
		+NotAutoaimed;
		RenderStyle "Translucent";
		Alpha 0.5;
	}
	States
	{
		Spawn:
			MTRL ABCDEF 3 A_FadeOut (0.1);
			Loop;
	}
}

Class DispersionRocketExplosion : Actor
{
	Default
	{
		Radius 6;
		Height 4;
		+NoBlockmap;
		+NoGravity;
		+ThruGhost;
		+NotAutoaimed;
		-Pushable;
		-DontThrust;
		RenderStyle "Add";
		Alpha 0.8;
		DamageType "NuclearRadiation";
	}
	States
	{
		Spawn:
			ROKE A 4 Bright
			{
				A_Explode (128,128);
				A_PlaySound("weapons/dispersionexplode");
			}
			ROKE B 5 Bright;
			ROKE CDE 6 Bright;
			ROKE F 5 Bright;
			ROKE G 4 Bright;
			Stop;
	}
}